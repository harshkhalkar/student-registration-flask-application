pipeline {
    agent any

    environment {
        IMAGE_NAME = "harshkhalkar/pyapp"
        IMAGE_TAG = "v1"
    }

    stages {
        stage('Cloning Repo') {
            steps {
                echo 'Cloning Repository...'
                checkout([$class: 'GitSCM',
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[url: 'https://github.com/harshkhalkar/student-registration-flask-application.git']]
                ])
            }
        }

        stage('Build Docker Image') {
            steps {
                echo 'Building Docker Image...'
                sh "docker build -t ${IMAGE_NAME}:${IMAGE_TAG} ."
            }
        }

        stage('Push to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'
                    sh "docker push ${IMAGE_NAME}:${IMAGE_TAG}"
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                sshagent(['5db86cd4-3324-4473-bf9b-f2f9f5e397d6']) {
                    sh '''
                        ssh -o StrictHostKeyChecking=no ubuntu@<K8S_MASTER_PUBLIC_IP> << 'ENDSSH'
                        mkdir -p /k8s
                        cd /k8s
                        git init
                        git pull https://github.com/harshkhalkar/student-registration-flask-application.git
                        cd kubernetes
                        kubectl apply -f mysql-configmap.yaml
                        kubectl apply -f mysql-deployment.yaml
                        kubectl apply -f mysql-service.yaml
                        kubectl apply -f pyapp-deployment.yaml
                        kubectl apply -f pyapp-service.yaml
                        kubectl get pods
                        kubectl get svc
                        ENDSSH
                    '''
                }
            }
        }
    }
}
